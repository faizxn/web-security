
CSRF  (token is valid till from existing from requst)
	
	- CSRF vulnerability with no defenses
				+ there is no csrf-token to validate, we can create csrf poc to create crafted html to send to intruders

	
	- CSRF where token validation depends on request method
				+ by default, with request body email and csrf token is exist,  if we remove csrf token then send request, it will trigger error for csrf token.. 
				+ change request method to GET from POST, then send the request and observe that email has been updated with csrf or without csrf token..
				+ for csrf-poc to send victim of create crafted html..
 
				
	- CSRF where token validation depends on token being present
				+ remove the csrf token and see if application accept the Post requst.. if &csrf= is exist with token, valid token must provide.. or it will error..  
				+ change the request method from Post to Get..
				+ for csrf-poc to send victim of create crafted html..
 				

	- CSRF where token is not tied to user session
						
				+ first apply above two technique i.e remove csrf-token and change request method..
				
				++ check if csrf token is tied to user session++
				++ two account is required to test this, from first account capture the request, from another account capture the same requst and copy the token 
				and request the token with first account using following token. 

				[if token works for once, it would not would not work twice, require refresh for new token]

	- 




	- CSRF with broken Referer validation

			+ this labs email change functionality is vulnerable to CSRF. It attempts to detect and block cross domain requests but the detection mechanism can be bypassed.
			+ check the brup proxy history and check the resulting request of "Update email" form.
				-send the request to Burp Repeater. Observe that if you change the domain in the Referer HTTP header, the request is rejected.

			+ with original request add "https://arbitrary-incorrect-domain.net?" before the original url request and send the request and observe it works and accepted.
				-Referer: https://arbitrary-incorrect-domain.net?YOUR-LAB-ID.web-security-academy.net

			+ Create a CSRF POC. add this "history.pushState("", "", "/?YOUR-LAB-ID.web-security-academy.net")"


						
