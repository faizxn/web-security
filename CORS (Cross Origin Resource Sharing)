


Test-Case-1 # To check this vulerablity .. Add "Origin: www.example.com" at Request Header. 
Test-Case-2 # If above origin returns then try with "Origin: null".
Test-Case-3 # If above two does not work, then try adding similar Hostname which are whitelist. 

Access-Control-Allow-Origin: * 
Access-Control-Allow-Origin: null
Access-Control-Allow-Origin: example-allowed.com


#When testing an application for CORS, we check if any of the application’s responses contain the CORS headers. 
We can use the search functionality in Burp Suite to search for the headers quickly. 

"Access-Control-Allow-Credentials"    [Check Options:   Case Sensitive | In-Scope Only]

To identify CORS issues, we can modify the Origin header in the requests with multiple values and
see what response headers we get back from the application. There are four (4) known ways to do this, which we'll go over now. 

1.Reflected Origins:
Set the Origin header in the request to an arbitrary domain, such as https://attackersdomain.com, and check the Access-Control-Allow-Origin header in the response

2. Modified Origins:
Set the Origin header to a value that matches the targeted domain, but add a prefix or suffix to the domain to check if there is any validation on the beginnings or ends of the domain.

  -metrics.com
  -attackmetrics.com
  -metrics.com.attack.com

3. Trusted subdomains with Insecure Protocol.
Set the Origin header to an existing subdomain and see if it accepts it. 
If it does, it means the domain trusts all its subdomains. 
This is not a good idea because if one of the subdomains has a Cross-Site Scripting (XSS) vulnerability, it will allow the attacker to inject a malicious JS payload and perform unauthorized actions.

4. Null Origin
Set the Origin header to the null value — Origin: null, and see if the application sets the Access-Control-Allow-Origin header to null. If it does, it means that null origins are whitelisted.

